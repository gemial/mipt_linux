.. table::

    +----------------------------+
    | **Date**    | 17.05.2021   |
    +----------------------------+
    | **Summary** | Лаба №9      |
    +----------------------------+
    | **Status**  | Published    |
    +----------------------------+
    | **Author**  | Федоров И.И  |
    +----------------------------+
    

**Содержание**:

    * `Работа с ветками в GIT. Git-Flow.`_
        * `Введение`_
        * `Ветки в git.`_
            * `Как работать с ветками.`_
        * `Gitflow.`_
            * `Понятие Git flow.`_
            * `Работа Gitflow.`_
        
====================================
Работа с ветками в GIT. Git-Flow.
====================================
***************
Введение
***************
Git-flow — это набор расширений git предоставляющий высокоуровневые операции над репозиторием.

В данной работе будет представлено описание веток в Git, принципы работы с ними, более полное раскрытие понятия Git-Flow.

***************
Ветки в git.
***************

Ветки - главная фишка git.
Git стал стандартом в системах контроля версий благодаря простой и удобной работе с ветками.

Как работают ветки:

Представим код проекта в виде дерева. Посередине ствол - это рабочее состояние проекта, тот код, который выложен на боевом сервере. Этот ствол в терминах git называется основной веткой разработки - веткой master. Эта ветка есть всегда в любом проекте. Как только мы клонировали или создали новый репозиторий, мы попали в ветку master. Все, что мы делали на предыдущих уроках, мы делали в мастере.

Когда мы начинаем работать над новым функционалом, мы создаем новую ветку на основе master. Это называется "ответвиться от мастера". После этого мы можем работать, создавать новые файлы, вносить изменения в старые, можем хоть удалить половину проекта - главное, что это будет изолировано от основного мастера. То есть в своей ветке мы можем как угодно ломать проект, основной код при этом не пострадает.

Кроме того, в любой момент можно переключиться на ветку master, чтобы доработать ошибки в основной версии. При этом созданная нами ветка никак не будет затронута.

После всех необходимых правок, можно объединить созданную ветку с веткой master, или, как это ее называется, смерджить (merge)

******************************
Как работать с ветками.
******************************

*Создать* новую ветку можно командой 

.. code:: bash

    $ git checkout -b |branchname|

После этого вы автоматически переключитесь на созданную только что ветку. Для переключения на уже существующую ветку можно воспользоваться командой 

.. code:: bash

    $ git checkout |branchname|

Но если в той ветке, в которой вы находитесь в данный момент есть не закоммиченные изменения, то переключиться на новую ветку не удастся.

*Посмотреть уже существующие ветки* можно командой 

.. code:: bash

    $ git branch

Звездочкой (* |branchname|) будет указываться та ветка, на которой мы сейчас находимся.

*Коммит* происходит так же, как и на основной ветке, через 

.. code:: bash

    $ git add

.. code:: bash

    $ git commit -m 'commit message'

и *пуш* через 

.. code:: bash

    $ git push origin |branchname|

Если же мы хотим переименовать ветку, то это можно сделать, находясь в нужной нам ветке, командой 

.. code:: bash

    $ git branch -m |new_branchname|

Чтобы *удалить* ветку, нужно воспользоваться командой 

.. code:: bash

    $ git branch -d |branchname|

предварительно переключившись на ветку master. Если же в ветке есть изменения, которые не залиты в master, и вы все равно хотите удалить ее, то следует изменить флаг -d на -D.

============
Gitflow.
============


******************
Понятие Git flow.
******************

Это- популярная модель управления ветками:
в ветке master содержится ровно тот же код, что и в рабочей версии проекта. А вся работа делается в ветке develop. Во время работы на основе develop создаются так называемые feature-ветки. Их может быть неограниченное количество. Далее, у нас есть ветка release, которая используется для подготовки к новому релизу проекта. Наконец, есть ветка hotfix, которая служит для срочного исправления багов, найденных, например, в рабочей ветке.

*****************
Работа Gitflow.
*****************

Вот как в теории, происходит рабочий процесс в Gitflow:

*1. Создается репозиторий*

*2. Репозиторий инициализируется*

*3. Начинается работа на ветке develop*

*4. Возникает необходимость опробовать новую идею – создается feature-ветка и делаются коммиты*

*5. Закончив работу на feature-ветке, вы сливаете ее с develop*

*6. Если вы довольны текущей версией, но хотите продолжить работу, создается ветка release, куда перемещается текущая версия. Правка багов будет происходить на этой же ветке.*

*7. Когда с веткой release покончено, она сливается веткой master и работа продолжается на ветке develop*

*8. Кроме того, этот момент можно отметить на master-ветке*

****************
Выводы.
****************

Мы разобрали основные понятия работы с ветками в системе контроля версий и в работе с популярной моделью работы с ветками Git Flow. Можно отметить, что данная модель не является единственно правильной, но является общепринятой и распространенной, также этой моделью пользуются разработчики, работающие в команде, поэтому эти знания могут пригодиться при работе с группой людей, с которой вы будете работать над одним проектом.
