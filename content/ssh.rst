Реферат по ssh
###################

:date: 2021-05-21 19:00
:summary: Работа на удаленном сервере. SSH
:status: published
:author: Бурова А.Е. Б06-907

.. default-role:: code
.. contents:: Содержание


SSH (англ. Secure Shell — «безопасная оболочка») - это протокол удаленного управления компьютером с операционной системой Linux. В основном ssh используется для удаленного управления серверами через терминал. 


Базовый синтаксис
------------------
Синтаксис команды выглядит следующим образом:

.. code-block:: bash

  $ ssh [опции] имя пользователя@сервер [команда]

Важно заметить что ssh может работать по двум версиям протокола. В этом реферате я буду подразумевать что вы используете версию 2.

Опции команды SSH
------------------
Теперь давайте рассмотрим самые основные опции команды ssh:

* f - перевести ssh в фоновый режим;\
* g - разрешить удаленным машинам обращаться к локальным портам;
* l - имя пользователя в системе;
* n - перенаправить стандартный вывод в /dev/null;
* p - порт ssh на удаленной машине;
* q - не показывать сообщения об ошибках;
* v - режим отладки;
* x - отключить перенаправление X11;
* X - включить перенаправление Х11;
* C - включить сжатие

Настройка сервера SSH
---------------------
Настройки сервера SSH находятся в файле /etc/ssh/sshd_config. Многие из них мы тоже трогать не будем. Рассмотрим только самые интересные. Сначала откройте файл /etc/ssh/sshd.conf

ПОРТ SSH
~~~~~~~~

По умолчанию ssh работает на порту 22. Но такое поведение небезопасно, поскольку злоумышленник знает этот порт и может попробовать выполнить Bruteforce атаку для перебора пароля. Порт задается строчкой:

.. code-block:: bash

  Port 22

Поменяйте значение порта на нужное.

РУТ ДОСТУП
~~~~~~~~~~
По умолчанию Root доступ по ssh разрешен, но такое поведение очень небезопасно, поэтому раскомментируйте строчку:

.. code-block:: bash

  PermitRootLogin no

ДОСТУП ТОЛЬКО ОПРЕДЕЛЕННОГО ПОЛЬЗОВАТЕЛЯ К SSH
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Мы можем разрешить доступ к ssh только для определенного пользователя или группы. Для этого  добавьте строчки:

.. code-block:: bash

  AllowUsers User1, User2, User3
  AllowGroups Group1, Group2, Group3

Здесь User1 и Group1 - пользователь и группа к которым нужно разрешить доступ.

ВЫПОЛНЕНИЕ X11 ПРИЛОЖЕНИЙ
~~~~~~~~~~~~~~~~~~~~~~~~~
Не все знают но есть возможность использовать ssh для запуска полноценных X11 приложений. Об этом мы поговорим ниже, но чтобы все заработало необходимо разрешить эту возможность на стороне сервера, добавьте такую строчку:

.. code-block:: bash

  X11Forwarding yes

Основные опции рассмотрели, перед тем как переходить дальше, не забудьте перезагрузить ssh сервер чтобы сохранить изменения:

.. code-block:: bash

  service sshd restart

Использование SSH
------------------
Основная цель этого реферата - показать интересные и полезные способы использования ssh. Переходим к самому вкусному - возможности ssh.

ПОДКЛЮЧЕНИЕ К СЕРВЕРУ
~~~~~~~~~~~~~~~~~~~~~
Чтобы просто подключиться к серверу по SSH используйте такую команду:

.. code-block:: bash

  ssh user@host

ВЫПОЛНИТЬ КОМАНДУ
~~~~~~~~~~~~~~~~~
Мы привыкли подключаться к удаленному серверу, а уже потом выполнять нужные команды, но на самом деле утилита ssh позволяет сразу выполнить нужную команду без открытия терминала удаленной машины. Например:

.. code-block:: bash

  ssh user@host ls

Выполнит команду ls на удаленном сервере и вернет ее вывод в текущий терминал.

ВЫПОЛНИТЬ ЛОКАЛЬНЫЙ СКРИПТ
~~~~~~~~~~~~~~~~~~~~~~~~~~
Выполним интерпретатор bash на удаленном сервере и передадим ему наш локальный скрипт с помощью перенаправления ввода Bash:

.. code-block:: bash

  ssh user@host 'bash -s' < script.sh

БЕКАП НА УДАЛЕННЫЙ СЕРВЕР И ВОССТАНОВЛЕНИЕ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Мы можем сохранять бекэп диска сразу на удаленном сервере с помощью ssh. Перенаправим вывод dd с помощью оператора перенаправления "|", затем сохраним его на той стороне в файл:

.. code-block:: bash

  sudo dd if=/dev/sda | ssh user@host 'dd of=sda.img'

Теперь чтобы восстановить состояние диска из сделанной копии выполните:

.. code-block:: bash

  ssh user@host 'dd if=sda.img' | dd of=/dev/sda

Здесь и выше /dev/sda имя файла вашего жесткого диска.

АУТЕНТИФИКАЦИЯ БЕЗ ПАРОЛЯ
~~~~~~~~~~~~~~~~~~~~~~~~~
Использование ssh пароля для входа на сервер не только неудобно но и небезопасно, потому что этот пароль в любой момент может быть подобран. Самый надежный и часто используемый способ аутентификации - с помощью пары ключей RSA. Секретный ключ хранится на компьютере, а публичный используется на сервере для удостоверения пользователя.

Настроить такое поведение очень легко. Сначала создайте ключ командой:

.. code-block:: bash

  ssh-keygen -t rsa

Во время создания ключа нужно будет ответить на несколько вопросов, расположение оставляйте по умолчанию, если хотите подключаться без пароля - поле Passphare тоже оставьте пустым.

Затем отправляем ключ на сервер:

.. code-block:: bash

  ssh-copy-id -i ~/.ssh/id_rsa.pub user@host

Вот и все. Теперь при попытке подключится к этому серверу пароль запрашиваться не будет, а сразу произойдет подключение. Смотрите подробнее создание открытого ключа для ssh.

ВЗЯТЬ ПАРОЛЬ ИЗ ЛОКАЛЬНОГО ФАЙЛА
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Напомню, что хранить пароли в обычных текстовых файлах небезопасно, но если хотите, то да - возможно. Для этого используется оператор перенаправления ввода Bash:

.. code-block:: bash

  ssh user@host < local_file.txt

ИЗМЕНИТЬ ПРИВЕТСТВИЕ SSH
~~~~~~~~~~~~~~~~~~~~~~~~
При входе по ssh может выводиться приветствие, изменить его очень легко. За это отвечает файл /etc/issue. Просто откройте этот файл и введите нужный текст:

.. code-block:: bash

  vi /etc/issue
  Welcome!

СМОТРИМ НЕУДАЧНЫЕ ПОПЫТКИ ВХОДА SSH
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Хотите посмотреть были ли попытки неудачного доступа по ssh к вашему серверу и с каких IP адресов? Запросто, все запросы логируются в файл /var/log/secure, отфильтруем только нужные данные командой:

.. code-block:: bash

  cat /var/log/secure | grep "Failed password for"

ПЕРЕДАЧА ФАЙЛОВ ПО SSH
~~~~~~~~~~~~~~~~~~~~~~
Кроме выполнения команд, можно копировать файлы по ssh. Для этого используется утилита scp. Просто укажите файл, который нужно передать, удаленный сервер и папку на сервере, вот:

.. code-block:: bash

  $ scp /адрес/локального/файла пользователь@хост:адрес/папки

Например:

.. code-block:: bash

  scp ~/test.txt user@host:documents

Кроме утилиты scp, передача файлов ssh может быть выполнена более хитрым способом. Прочитаем файл и с помощью cat, передадим, а там сохраним поток в файл:

.. code-block:: bash

  cat localfile | ssh user@host "cat > remotefile"

Или так:

.. code-block:: bash

  ssh user@host "cat > remotefile" < localfile

Пойдем еще дальше, вы можете сжимать файлы перед передачей с помощью tar, а потом их сразу же на лету распаковывать:

.. code-block:: bash

  tar czf - /home/user/file | ssh user@host tar -xvzf -C /home/remoteuser/

Такое копирование файлов ssh позволяет отправлять сразу целые папки.

ЗАПУСК ГРАФИЧЕСКИХ ПРИЛОЖЕНИЙ ПО SSH
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Если вам нужно запустить то или иное графическое приложение на удаленной машине необязательно для этого использовать VNC, вы можете обойтись возможностями ssh. Программа будет выполняться на стороне сервера, а вам будет лишь транслироваться окно, чтобы вы могли сделать все что нужно. Причем все данные шифруются. Чтобы эта функция работала, нужно включить ее поддержку на стороне сервера.

Затем просто выполняем команду запуска графического приложения на удаленном сервере вот таким образом:

.. code-block:: bash

  ssh -XC user@remotehost "eclipse"

Как вы уже видели опция X разрешает перенаправление X11 на стороне клиента, а С - сжатие данных.

ЗАВЕРШЕНИЕ СЕССИИ SSH
~~~~~~~~~~~~~~~~~~~~~~
Если вы использовали SSH с нестабильным интернетом, когда соединение время от времени рвется, то вам уже, наверное, надоело закрывать терминал, потому что иначе, на первый взгляд, сеанс никак не прекратить. Когда соединение с удаленным сервером разорвано вы не можете ввести никакую команду и сочетания клавиш Ctrl+C, Ctrl+Z, Ctrl+D не работают. И не будут работать поскольку клиент пытается отправить эти команды на сервер. Но есть решение - Escape последовательности. Чтобы активировать их поддержку добавьте строку:

.. code-block:: bash

  EscapeChar ~

В файл /etc/ssh/ssh_config. Теперь, чтобы разорвать SSH соединение достаточно нажать Enter и набрать:

.. code-block:: bash

  ~.

Другие управляющие символы можно узнать нажав:

.. code-block:: bash

  ~?

ТУННЕЛИ SSH
~~~~~~~~~~~~~~~~~
С помощью SSH туннелей вы можете пробросить порт с удаленного сервера на локальную машину. Это очень полезно, в первую очередь, для разработчиков. Для того чтобы пробросить порт с удалённой машины локальной используйте опцию -L и такой синтаксис:

.. code-block:: bash

  $ ssh -L локальный_порт:удаленный_адрес:удаленный_порт пользователь@сервер

Например, сделаем удалённую базу данных доступной локально на порту 5555. Для этого выполните подставив свои значения:

.. code-block:: bash

  $ ssh -N -L 5555:127.0.0.1:3306 root@losst-1



Опция -N сообщает, что команду на удаленной машине выполнять не нужно. Локальный порт - 5555, поскольку сервер баз данных слушает на локальном интерфейсе удаленной машины, то и здесь надо указывать адрес 127.0.0.1. А порт MySQL по умолчанию 3306. Если же вы хотите чтобы локальный сервис был доступен на удалённой машине, то следует использовать опцию -R:

.. code-block:: bash

  $ ssh -N -R 5555:127.0.0.1:3306 root@losst-1

Теперь локальная база данных на порту 3306 будет доступна на удалённом сервере при обращении к порту 5555.

Выводы
------------------
Теперь мы знаем как пользоваться SSH, ура! Как видите, технология SSH позволяет сделать намного больше чем можно предположить с первого взгляда, и это еще далеко не все. 
